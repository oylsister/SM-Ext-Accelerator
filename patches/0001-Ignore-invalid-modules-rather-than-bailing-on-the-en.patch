From f51f99bfce40616dbe63eeb070fda213b6f421ec Mon Sep 17 00:00:00 2001
From: patches <patches@localhost>
Date: Mon, 20 Feb 2023 18:00:50 +0800
Subject: [PATCH] Ignore invalid modules rather than bailing on the entire
 module list

---
 src/processor/minidump.cc | 13 ++++++++++---
 1 file changed, 10 insertions(+), 3 deletions(-)

diff --git a/src/processor/minidump.cc b/src/processor/minidump.cc
index 8c4f75d6..b9662f3c 100644
--- a/src/processor/minidump.cc
+++ b/src/processor/minidump.cc
@@ -3180,7 +3180,14 @@ bool MinidumpModuleList::Read(uint32_t expected_size) {
         BPLOG(ERROR) << "MinidumpModuleList found bad base address for module "
                      << module_index << "/" << module_count << ", "
                      << module.code_file();
-        return false;
+        continue;
+      }
+
+      if (module_size == static_cast<uint32_t>(-1)) {
+        BPLOG(ERROR) << "MinidumpModuleList found bad size for module "
+                     << module_index << "/" << module_count << ", "
+                     << module.code_file();
+        continue;
       }
 
       // Some minidumps have additional modules in the list that are duplicates.
@@ -3207,7 +3214,7 @@ bool MinidumpModuleList::Read(uint32_t expected_size) {
                        << module_index << "/" << module_count << ", "
                        << module.code_file() << ", " << HexString(base_address)
                        << "+" << HexString(module_size);
-          return false;
+          continue;
         }
 
         // If failed due to apparent range overlap the cause may be the client
@@ -3221,7 +3228,7 @@ bool MinidumpModuleList::Read(uint32_t expected_size) {
                        << module_index << "/" << module_count << ", "
                        << module.code_file() << ", " << HexString(base_address)
                        << "+" << HexString(module_size) << ", after adjusting";
-          return false;
+          continue;
         }
       }
       last_end_address = base_address + module_size;
-- 
2.25.1

